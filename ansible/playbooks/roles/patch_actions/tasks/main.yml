---
## TODO write frontend to serve html report

## ANCHOR BEGIN

- name: create conditionals
  set_fact:
    stage_update:
    upgrade:

## ANCHOR device uptime
- name: get uptime
  shell: w | awk 'NR==1{print $2,$3}' | sed 's/,//g'
  register: uptime_days

## ANCHOR last yum update
- name: Date of Last Update
  shell: "rpm -qa -last | awk 'NR==1{print $2 , $3 , $4 , $5}' | sort -k3,3nr -k2,2M -k1,1 | uniq | head"
  when: ansible_facts['pkg_mgr'] == "yum"
  register: update

## ANCHOR last apt update
- name: Last Time apt/history.log was Modified
  shell: ls --full-time /var/lib/apt/periodic/update-success-stamp | awk '{print $6}'
  #shell: stat /var/log/apt/history.log | awk 'NR==6{print $1, $2}' | sed 's/Modify://g'
  register: apt_history
  when: ansible_facts['pkg_mgr'] == "apt"

## ANCHOR yum updateinfo (security/bug fixes)
- name: Check Fixes
  shell: 'yum updateinfo | grep "Update*" -A30'
  when: ansible_facts['pkg_mgr'] == "yum"
  register: Sec_Impact

## ANCHOR update the apt cache, stage upgrade
- name: Update apt Cache
  apt: 
    update_cache: yes
  when: ansible_facts['pkg_mgr'] == "apt" and stage_update == true
  register: cache_results

- name: upgrade system
  apt: 
    upgrade: '{{ upgrade_choice }}'
  when: ansible_facts['pkg_mgr'] == "apt" and upgrade == true
  register: upgrade_results

## ANCHOR set facts for displaying our json data
- name: Store host-specific data
  set_fact:
    host_data: 
      FQDN: "{{ ansible_nodename }}"
      Package Manager: "{{ ansible_pkg_mgr }}"
      Operating System: "{{ ansible_distribution }} {{ ansible_distribution_version }}"
      IP Addresses: "{{ ansible_all_ipv4_addresses }}"
      Device Uptime: "{{ uptime_days.stdout_lines[0] }} Days"
      Last Yum Update: "{{ update.stdout_lines | default([]) if ansible_facts['pkg_mgr'] == 'yum' else omit }}"
      Yum Security/Bug Fixes: "{{ Sec_Impact.stdout_lines | default([]) if ansible_facts['pkg_mgr'] == 'yum' else omit }}"
      Last Apt Update: "{{ apt_history.stdout_lines | default([]) if ansible_facts['pkg_mgr'] == 'apt' else omit }}"
      Apt Upgrade: "{{ upgrade_results.stdout_lines | default([]) if ansible_facts['pkg_mgr'] == 'apt' and upgrade == true else omit }}"

## ANCHOR aggregate the data
- name: Combine data from all hosts
  set_fact:
    aggregated_data: "{{ aggregated_data | default({}) | combine({ item: hostvars[item].host_data }) }}"
  loop: "{{ ansible_play_hosts_all }}"

## ANCHOR Write our output in JSON
- name: write json locally
  copy:
    content: "{{ aggregated_data | to_nice_json }}"
    dest: "/tmp/master.json"
  delegate_to: 172.16.101.182
