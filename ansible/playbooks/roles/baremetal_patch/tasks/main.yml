---
## TODO write frontend to serve html report

## ANCHOR BEGIN
## ANCHOR device uptime
- name: get uptime
  shell: w | awk 'NR==1{print $2,$3}' | sed 's/,//g'
  register: uptime_days

## ANCHOR last yum update
- name: Date of Last Update
  shell: "rpm -qa -last | awk 'NR==1{print $2 , $3 , $4 , $5}' | sort -k3,3nr -k2,2M -k1,1 | uniq | head"
  when: ansible_facts['pkg_mgr'] == "yum"
  register: update

## ANCHOR last apt update
- name: Last Time apt/history.log was Modified
  shell: ls --full-time /var/lib/apt/periodic/update-success-stamp | awk '{print $6}'
  #shell: stat /var/log/apt/history.log | awk 'NR==6{print $1, $2}' | sed 's/Modify://g'
  register: apt_history
  when: ansible_facts['pkg_mgr'] == "apt"

## ANCHOR yum updateinfo (security/bug fixes)
- name: Check Fixes
  shell: 'yum updateinfo | grep "Update*" -A30'
  when: ansible_facts['pkg_mgr'] == "yum"
  register: Sec_Impact

## ANCHOR update the apt cache, stage upgrade
- name: Update apt Cache
  apt: 
    update_cache: yes
  when: ansible_facts['pkg_mgr'] == "apt"
  register: cache_results

## ANCHOR set facts for displaying our json data
- name: Store host-specific data
  set_fact:
    host_data: 
      FQDN: "{{ ansible_nodename }}"
      Package Manager: "{{ ansible_pkg_mgr }}"
      Operating System: "{{ ansible_distribution }} {{ ansible_distribution_version }}"
      IP Addresses: "{{ ansible_all_ipv4_addresses }}"
      Device Uptime: "{{ uptime_days.stdout_lines[0] }} Days"
      Last Yum Update: "{{ update.stdout_lines | default([]) if ansible_facts['pkg_mgr'] == 'yum' else omit }}"
      Yum Security/Bug Fixes: "{{ Sec_Impact.stdout_lines | default([]) if ansible_facts['pkg_mgr'] == 'yum' else omit }}"
      Last Apt Update: "{{ apt_history.stdout_lines | default([]) if ansible_facts['pkg_mgr'] == 'apt' else omit }}"

## ANCHOR aggregate the data
- name: Combine data from all hosts
  set_fact:
    aggregated_data: "{{ aggregated_data | default({}) | combine({ item: hostvars[item].host_data }) }}"
  loop: "{{ ansible_play_hosts_all }}"

## ANCHOR Write our output in JSON
- name: write json locally
  copy:
    content: "{{ aggregated_data | to_nice_json }}"
    dest: "/tmp/master.json"
  delegate_to: 172.16.101.182

## ANCHOR parse our JSON output to make it valid

# - name: cleanup json file
#   replace: 
#     path: "/tmp/master.json"
#     regexp: "{{ item }}"
#     replace: ''
#   loop:
#     - 'Updates Information Summary: updates'
#     - 'updateinfo summary done'
#     - '"",'
#     - '""'
#   delegate_to: 172.16.101.182
  # run_once: true

- name: manually remove some things
  replace:
    path: /tmp/master.json
    regexp: 'Updates Information Summary: updates'
    replace: ''
  delegate_to: 172.16.101.182

- name: manually remove some things
  replace:
    path: /tmp/master.json
    regexp: 'updateinfo summary done'
    replace: ''
  delegate_to: 172.16.101.182

- name: manually remove some things
  replace:
    path: /tmp/master.json
    regexp: '"",'
    replace: ''
  delegate_to: 172.16.101.182

- name: manually remove some things
  replace:
    path: /tmp/master.json
    regexp: '""'
    replace: ''
  delegate_to: 172.16.101.182

- name: last bit of cleaning
  shell: sed -i '$d' /tmp/master.json
  delegate_to: 172.16.101.182

- name: last bit of cleaning
  shell: sed -i '1s/^{//' /tmp/master.json
  delegate_to: 172.16.101.182

- name: last bit of cleaning for real this time
  shell: sed -i '$s/}]$//' /tmp/master.json
  delegate_to: 172.16.101.182

- name: damage control
  lineinfile:
    path: /tmp/master.json
    line: '}'
  delegate_to: 172.16.101.182

## ANCHOR create python script to convert JSON -> HTML
- name: create our python file
  blockinfile:
    path: /tmp/convert.py
    block: |
      from json2html import *
      input = {

      }
      out = json2html.convert(json = input)
      htmlout = '/root/nginx-content/index.html'
      with open(htmlout, 'w') as htmlfile:
          htmlfile.write(str(out))
          print('Done')
    create: yes
  delegate_to: 172.16.101.182

## ANCHOR create JS script to send our JSON to MongoDB
- name: create mongo input
  blockinfile:
    path: /tmp/mongo.js
    block: |
      db.reports.insert({

      })
    create: yes
  delegate_to: 172.16.101.182

- name: migrate json data to python file to convert to html
  shell: sed -i '3r /tmp/master.json' /tmp/convert.py
  delegate_to: 172.16.101.182
  run_once: true

- name: migrate json data to mongo input
  shell: sed -i '2r /tmp/master.json' /tmp/mongo.js
  delegate_to: 172.16.101.182
  run_once: true

## ANCHOR parse mongo JS script
- name: cleanup mongo input
  lineinfile: 
    path: "/tmp/mongo.js"
    line: "{{ item }}"
    state: absent
  loop:
    - "# BEGIN ANSIBLE MANAGED BLOCK"
    - "# END ANSIBLE MANAGED BLOCK"
  delegate_to: 172.16.101.182
  run_once: true

## ANCHOR grab mongo creds via kube secrets
- name: grab mongo user
  shell: >
    kubectl -n mongo get secrets mongodb-sec 
    -o go-template='{{ "{{" }} index .data "mongo-username" | base64decode {{ "}}" }}'
  delegate_to: 172.16.101.182
  run_once: true
  register: mongo_user

- name: grab mongo password
  shell: >
    kubectl -n mongo get secrets mongodb-sec 
    -o go-template='{{ "{{" }} index .data "mongo-password" | base64decode {{ "}}" }}'
  delegate_to: 172.16.101.182
  run_once: true
  register: mongo_pw

- name: grab mongo IP
  shell: kubectl get pod mongo-stateful-0 -o wide | awk 'NR==2{print $6}'
  register: mongodb_IP

## ANCHOR insert our JSON output into MongoDB
- name: send output to mongo
  community.mongodb.mongodb_shell:
    login_host: "{{ mongodb_IP }}"
    login_user: "{{ mongo_user.stdout }}"
    login_password: "{{ mongo_pw.stdout }}"
    file: "/tmp/mongo.js"
  delegate_to: 172.16.101.182
  run_once: true

- name: delete mongo output
  file:
    path: /tmp/mongo.js
    state: absent
  delegate_to: 172.16.101.182

## ANCHOR convert the JSON to HTML
- name: run our python script
  shell: python3 /tmp/convert.py
  register: html
  run_once: true
  delegate_to: 172.16.101.182

## ANCHOR give our HTML a css stylesheet
- name: css style
  blockinfile:
    path: /root/nginx-content/index.html
    insertbefore: "<table b"
    block: |
      <head>
        <link rel="stylesheet" type="text/css" href="style.css">
      </head>
  delegate_to: 172.16.101.182

## ANCHOR get rid of markers in html file
- name: cleanup markers
  lineinfile: 
    path: "/root/nginx-content/index.html"
    line: "{{ item }}"
    state: absent
  loop:
    - "# BEGIN ANSIBLE MANAGED BLOCK"
    - "# END ANSIBLE MANAGED BLOCK"
  delegate_to: 172.16.101.182
  run_once: true

## ANCHOR END
- name: review results
  debug:
    msg: 'Please navigate to http://172.16.101.182:31505/ to view the results of this report'
  run_once: true