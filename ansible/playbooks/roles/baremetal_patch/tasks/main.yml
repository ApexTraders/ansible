---

## ANCHOR hostname & IP
- name: grab hostname and IP's
  shell: hostname; ifconfig | sed -En 's/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\.){3}[0-9]*).*/\2/p';
  register: ip

# ## ANCHOR device uptime
- name: get uptime
  shell: w | awk 'NR==1{print $2,$3}' | sed 's/,//g'
  register: uptime_days
# - name: Set Uptime Fact
#   set_fact:
#     uptime_days: "{{ (ansible_facts['uptime_seconds'] | int / 86400) | round(0) }}"

## ANCHOR last yum update
- name: Date of Last Update
  shell: "rpm -qa -last | awk '{print $2 , $4 , $5}' | sort -k3,3nr -k2,2M -k1,1 | uniq | head"
  when: ansible_facts['pkg_mgr'] == "yum"
  register: update

## ANCHOR last apt update
- name: Last Time apt/history.log was Modified
  shell: stat /var/log/apt/history.log | awk 'NR==6{print $1, $2}' | sed 's/Modify://g'
  register: apt_history
  when: ansible_facts['pkg_mgr'] == "apt"

## ANCHOR yum updateinfo (security/bug fixes)
- name: Check Fixes
  shell: 'yum updateinfo | grep "Update*" -A30'
  when: ansible_facts['pkg_mgr'] == "yum"
  register: Sec_Impact

## ANCHOR update the apt cache, stage upgrade
- name: Update apt Cache
  apt: 
    update_cache: yes
  when: ansible_facts['pkg_mgr'] == "apt"
  register: cache_results

## ANCHOR everything below is printing data
- name: Check for RedHat Based OS
  debug:
    msg: "Found RedHat-based Installation"
  when: ansible_facts['pkg_mgr'] == "yum"

- name: Check for Debian Based OS
  debug:
    msg: "Found Debian-based Installation"
  when: ansible_facts['pkg_mgr'] == "apt"

- name: Print Hostname & IP(s)
  debug:
    msg:
    - "Command - {{ ip.cmd }}"
    - "Results - {{ ip.stdout_lines }}"
  register: jsonoutput

- name: write json locally
  copy:
    content: "{{ jsonoutput | to_nice_json }}"
    dest: "/tmp/output1.json"

- name: clean up our json data
  replace: 
    path: /tmp/output1.json
    regexp: "msg"
    replace: "Value"

- name: clean up our json data again
  lineinfile: 
    path: /tmp/output1.json
    regexp: 
    - '"changed": false,'
    state: absent 

- name: Print Date of Last yum Usage
  debug:
    msg: "yum was last ran on {{ update.stdout_lines[0] }}."
  when: ansible_facts['pkg_mgr'] == "yum"

- name: Print Date of Last apt Usage
  debug:
    msg: "apt was last ran on{{ apt_history.stdout_lines[0] }}."
  when: ansible_facts['pkg_mgr'] == "apt"

- name: Print Last Reboot
  debug:
    var: uptime_days.stdout_lines
    # msg:
    # - "{{ item.key }}"
    # - "{{ item.changed }}"
    # - "{{ item.cmd }}"
  #loop: "{{ uptime_days | dict2items(key_name='key', value_name='value') }}"
  #when: (uptime_days | int) >= 0

# - name: Print Last Reboot
#   debug:
#     msg: "The device {{ ansible_facts['nodename'] }} has been online for {{ uptime_days }} days, this number is rounded to the nearest whole day."
#   when: (uptime_days | int) >= 0

- name: Print apt Success Check
  debug:
    msg: "The apt cache has successfully updated (equivalent of apt-get update)."
  when: ansible_facts['pkg_mgr'] == "apt" and cache_results["cache_updated"] == true

- name: Print apt Failure Check
  debug:
    msg: "The apt cache has failed it's update. Please manually troubleshoot"
  when: ansible_facts['pkg_mgr'] == "apt" and cache_results["cache_updated"] == false

- name: Print Bug/Security Fixes for yum
  debug:
    var: Sec_Impact | type_debug
  when: ansible_facts['pkg_mgr'] == "yum"