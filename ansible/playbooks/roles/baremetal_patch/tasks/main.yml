---

## TODO make a shit ton of files for every task in proper JSON and combine them into 1 json file to be converted to HTML


## ANCHOR hostname & IP
- name: Grab hostname/ip
  set_fact:
    device:
      hostname: "{{ ansible_facts['nodename'] }}"
      ip_addresses: "{{ ansible_facts['all_ipv4_addresses'] }}"

- name: Initialize an empty list for storing results
  set_fact:
    all_devices: []
    
# ## ANCHOR device uptime
- name: get uptime
  shell: w | awk 'NR==1{print $2,$3}' | sed 's/,//g'
  register: uptime_days

## ANCHOR last yum update
- name: Date of Last Update
  shell: "rpm -qa -last | awk 'NR==1{print $2 , $4 , $5}' | sort -k3,3nr -k2,2M -k1,1 | uniq | head"
  when: ansible_facts['pkg_mgr'] == "yum"
  register: update

## ANCHOR last apt update
- name: Last Time apt/history.log was Modified
  shell: stat /var/log/apt/history.log | awk 'NR==6{print $1, $2}' | sed 's/Modify://g'
  register: apt_history
  when: ansible_facts['pkg_mgr'] == "apt"

## ANCHOR yum updateinfo (security/bug fixes)
- name: Check Fixes
  shell: 'yum updateinfo | grep "Update*" -A30'
  when: ansible_facts['pkg_mgr'] == "yum"
  register: Sec_Impact

## ANCHOR update the apt cache, stage upgrade
- name: Update apt Cache
  apt: 
    update_cache: yes
  when: ansible_facts['pkg_mgr'] == "apt"
  register: cache_results

## ANCHOR set facts for displaying our json data
- name: Store host-specific data
  set_fact:
    host_data: 
      FQDN: "{{ ansible_nodename }}"
      IP Addresses: "{{ ansible_all_ipv4_addresses }}"
      Device Uptime: "{{ uptime_days.stdout_lines[0] }} Days"
      Last Yum Update: "{{ update.stdout_lines | default([]) if ansible_facts['pkg_mgr'] == 'yum' else omit }}"
      Yum Security/Bug Fixes: "{{ Sec_Impact.stdout_lines | default([]) if ansible_facts['pkg_mgr'] == 'yum' else omit }}"
      Last Apt Update: "{{ apt_history.stdout_lines | default([]) if ansible_facts['pkg_mgr'] == 'apt' else omit }}"

- name: Combine data from all hosts
  set_fact:
    aggregated_data: "{{ aggregated_data | default({}) | combine({ item: hostvars[item].host_data }) }}"
  loop: "{{ ansible_play_hosts_all }}"

- name: write json locally
  copy:
    content: "{{ aggregated_data | to_nice_json }}"
    dest: "/tmp/master.json"
  delegate_to: 172.16.101.183

- name: manually remove some things
  replace:
    path: /tmp/master.json
    regexp: 'Updates Information Summary: updates'
    replace: ''
  delegate_to: 172.16.101.183

- name: manually remove some things
  replace:
    path: /tmp/master.json
    regexp: 'updateinfo summary done'
    replace: ''
  delegate_to: 172.16.101.183

- name: manually remove some things
  replace:
    path: /tmp/master.json
    regexp: '"",'
    replace: ''
  delegate_to: 172.16.101.183

- name: manually remove some things
  replace:
    path: /tmp/master.json
    regexp: '""'
    replace: ''
  delegate_to: 172.16.101.183

- name: last bit of cleaning
  shell: sed -i '$d' /tmp/master.json
  delegate_to: 172.16.101.183

- name: last bit of cleaning
  shell: sed -i '1s/^{//' /tmp/master.json
  delegate_to: 172.16.101.183

- name: last bit of cleaning for real this time
  shell: sed -i '$s/}]$//' /tmp/master.json
  delegate_to: 172.16.101.183

- name: damage control
  lineinfile:
    path: /tmp/master.json
    line: '}'
  delegate_to: 172.16.101.183

- name: create our python file
  blockinfile:
    path: /tmp/convert.py
    block: |
      from json2html import *
      input = {

      }

      print(json2html.convert(json = input))
    create: yes
  delegate_to: 172.16.101.183

- name: migrate json data to python file to convert to html
  shell: sed -i '3r /tmp/master.json' /tmp/convert.py
  delegate_to: 172.16.101.183
  run_once: true

- name: run our python script
  shell: python3 /tmp/convert.py
  register: html

- name: test output
  debug:
    var: html

- name: delete our python script & json output
  shell: rm /tmp/master.json #rm /tmp/convert.py
  