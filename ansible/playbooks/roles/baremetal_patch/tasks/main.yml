---

## TODO make a shit ton of files for every task in proper JSON and combine them into 1 json file to be converted to HTML

# - name: Print all available facts
#   ansible.builtin.debug:
#     var: ansible_facts

## ANCHOR hostname & IP
- name: Grab Host Facts
  set_fact:
    device:
      hostname: "{{ ansible_facts['nodename'] }}"
      ip_addresses: "{{ ansible_facts['all_ipv4_addresses'] }}"

- name: Initialize an empty list for storing results
  set_fact:
    all_devices: []
    
# ## ANCHOR device uptime
- name: get uptime
  shell: w | awk 'NR==1{print $2,$3}' | sed 's/,//g'
  register: uptime_days
# - name: Set Uptime Fact
#   set_fact:
#     uptime_days: "{{ (ansible_facts['uptime_seconds'] | int / 86400) | round(0) }}"

## ANCHOR last yum update
- name: Date of Last Update
  shell: "rpm -qa -last | awk '{print $2 , $4 , $5}' | sort -k3,3nr -k2,2M -k1,1 | uniq | head"
  when: ansible_facts['pkg_mgr'] == "yum"
  register: update

## ANCHOR last apt update
- name: Last Time apt/history.log was Modified
  shell: stat /var/log/apt/history.log | awk 'NR==6{print $1, $2}' | sed 's/Modify://g'
  register: apt_history
  when: ansible_facts['pkg_mgr'] == "apt"

## ANCHOR yum updateinfo (security/bug fixes)
- name: Check Fixes
  shell: 'yum updateinfo | grep "Update*" -A30'
  when: ansible_facts['pkg_mgr'] == "yum"
  register: Sec_Impact

## ANCHOR update the apt cache, stage upgrade
- name: Update apt Cache
  apt: 
    update_cache: yes
  when: ansible_facts['pkg_mgr'] == "apt"
  register: cache_results

## ANCHOR everything below is printing data
- name: Aggregate host facts
  set_fact:
    all_devices: "{{ all_devices + [hostvars[item].device] }}"
  loop: "{{ ansible_play_hosts_all }}"

- name: write json locally
  copy:
    content: "{{ all_devices | to_nice_json }}"
    dest: "/tmp/master.json"
  delegate_to: 172.16.101.183

- name: grab date of last yum usage
  lineinfile:
    path: /tmp/master.json
    line: "{{ update | to_nice_json }}"
    create: yes
  #when: ansible_facts['pkg_mgr'] == "yum"
  delegate_to: 172.16.101.183

- name: grab date of last apt usage
  lineinfile:
    path: /tmp/master.json
    line: "{{ ansible_facts['nodename'] }} {{ apt_history | to_nice_json }}"
    create: yes
  #when: ansible_facts['pkg_mgr'] == "apt"
  delegate_to: 172.16.101.183

- name: grab uptime
  lineinfile:
    path: /tmp/master.json
    line: "{{ uptime_days | to_nice_json }}"
    create: yes
  delegate_to: 172.16.101.183


- name: begin parsing our JSON file
  replace:
    path: /tmp/master.json
    regexp: '^"failed".*$'
    replace: ''
  delegate_to: 172.16.101.183


# - name: Print apt Success Check
#   debug:
#     msg: "The apt cache has successfully updated (equivalent of apt-get update)."
#   when: ansible_facts['pkg_mgr'] == "apt" and cache_results["cache_updated"] == true

# - name: Print apt Failure Check
#   debug:
#     msg: "The apt cache has failed it's update. Please manually troubleshoot"
#   when: ansible_facts['pkg_mgr'] == "apt" and cache_results["cache_updated"] == false

# - name: Print Bug/Security Fixes for yum
#   debug:
#     var: Sec_Impact | type_debug
#   when: ansible_facts['pkg_mgr'] == "yum"